# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    download_directory: '../public/'
    admin_email: admin@admin.com
    video_directory: 'kernel.project_dir%/public/uploads/videos'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $globalParam: 'global param to be used by all services defined in this file'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{DependencyInjection,Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Controller\DefaultController:

        bind:

            $logger: '@monolog.logger.doctrine'

#    App\Services\MyService:
#        arguments:
##            $param: 'some param'
##            $param2: 'some param 2'
##            $adminEmail: '%admin_email%'
#             $second_service: '@App\Services\MySecondService'


## LAZY services doesnt load instantiate if isnt needed, should be used if services are heavy depended from one another
##    Lazy services packaage: proxy-manager-bridge
#    App\Services\MyService:
##        properties:
##             my: '@App\Services\MySecondService'
##             logger: '@monolog.logger'
#        arguments:
#            $service: '@App\Services\MySecondService'
#    App\Services\MySecondService:
#        lazy: true
#

#SERVICE ALIASES
#    app.myservice:
#        class: App\Services\MyService
#        arguments:
#            $one: 'something'
#        public: true
## this service event commented out work, becouse autowire: true option but if arguments used we need to uncomment line below
#    App\Services\MyService: '@app.myservice'
#
##for example if we use service tag for isntance twig tag, on load our service will be added as a extension for twig engine


#    AS THIS services uses event postFlush, so theat means than on every flush event our service will be inisiliazed, so its like an event listener for us
#    service has to have the same method as the event
#    App\Services\MyService:
#        tags:
#            - {name: doctrine.event_listener, event: postFlush }

## SERVICE TAGS helps to invoke events
#    App\Services\MyService:
#        tags:
#            - {name: doctrine.event_listener, event: postFlush }
#            - {name: kernel.cache_clearer }


# MyService gonna implement service interface HELPS Multipurpose use of services
    App\Services\ServiceInterface: '@App\Services\MyService'


#    EVENT LISTENER

#    //          EVENT LISTENERS AND SUBSCRIBERS
    #//          main difference between those are event listene ris defined in the configuration file and subscriber always know which event is being listened
#    App\EventListeners\KernelResponseListener:
#        tags:
#            - {name: kernel.event_listener, event: kernel.response }

#    App\EventListeners\VideoCreatedListener:
#      tags:
#          - {name: kernel.event_listener, event: video.created.event, method: onVideoCreatedEvent }

